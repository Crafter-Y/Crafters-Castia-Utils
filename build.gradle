plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/castiautils.accesswidener")
    runs {
        client {
            property("devauth.enabled", "true")
            property("fabric.development", "true")
        }
        clientProd {
            property("devauth.enabled", "true")
            property("fabric.development", "true")
            runDir = "run/prod"
            environment("client")
            defaultMainClass("${project.maven_group}.${project.archives_base_name}.CastiaUtils")
        }
    }
}

afterEvaluate {
    loom.runs.configureEach {
        // https://fabricmc.net/wiki/tutorial:mixin_hotswaps
        vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
    }
}

repositories {
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "JackFredMaven"
        url = "https://maven.jackf.red/releases/"
    }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.2.1")

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly "red.jackf:whereisit:${project.whereisit_version}"
    modImplementation "red.jackf:chesttracker:${project.chest_tracker_version}"


    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    modImplementation "curse.maven:jade-324717:${project.jade_id}"

    implementation "blue.endless:jankson:1.2.3"
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'net.time4j:time4j-core:4.38'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

def getGitCommitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def gitCommitHash = getGitCommitHash()

tasks.register('nightlyJar') {
    group = 'build'
    description = 'Creates a build with the JAR named with the current Git commit hash.'

    dependsOn tasks.remapJar

    doLast {
        def originalJar = tasks.remapJar.archiveFile.get().asFile
        def targetJar = new File(originalJar.parent, "${project.archives_base_name}-${project.mod_version}-${gitCommitHash}.jar")
        copy {
            from originalJar
            into targetJar.parentFile
            rename { targetJar.name }
        }
    }
}